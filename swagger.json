{
    "openapi": "3.0.0",
    "info": {
      "title": "Blogging App API",
      "version": "1.0.0",
      "description": "API documentation for the blogging app"
    },
    "servers": [
      {
        "url": "http://localhost:3000/api",
        "description": "Local Development Server"
      },
      {
        "url": "https://blogging-platform-backend-0eww.onrender.com/api",
        "description": "Staging Server"
      }
    ],
    "tags": [
        {
            "name": "AuthController",
            "description": "Endpoints related to user management"
        },
        {
            "name": "PostController",
            "description": "Endpoints related to product management"
        }
    ],
    "paths": {
        "/posts":{
            "get":{
               "tags": ["PostController"],
               "summary":"Retrieve All Posts",
               "description":"Fetches a list of posts with their previews and details.",
               "responses":{
                  "200":{
                     "description":"Success response for fetching posts",
                     "content":{
                        "application/json":{
                           "schema":{
                              "type":"object",
                              "properties":{
                                 "succeeded":{
                                    "type":"boolean",
                                    "example":true
                                 },
                                 "message":{
                                    "type":"string",
                                    "example":"Action was successful"
                                 },
                                 "statusCode":{
                                    "type":"string",
                                    "example":"200"
                                 },
                                 "resultData":{
                                    "type":"array",
                                    "items":{
                                       "type":"object",
                                       "properties":{
                                          "postId":{
                                             "type":"string",
                                             "example":"000000-post-id"
                                          },
                                          "postPreview":{
                                             "type":"string",
                                             "example":"Preview of post - first 100 characters "
                                          },
                                          "title":{
                                             "type":"string",
                                             "example":"Title of post"
                                          },
                                          "authorId":{
                                             "type":"string",
                                             "example":"author-id"
                                          },
                                          "htmlContent":{
                                             "type":"string",
                                             "example":"<p>HTML content of post ......</p>\n"
                                          }
                                       }
                                    }
                                 }
                              },
                              "required":[
                                 "succeeded",
                                 "message",
                                 "statusCode",
                                 "resultData"
                              ]
                           }
                        }
                     }
                  }
               }
            }
        },
        "/posts/{id}": {
            "get": {
                "tags": ["PostController"],
                "summary": "Retrieve a single post details by ID",
                "parameters": [
                    {
                    "in": "path",
                    "name": "id",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A single blog post",
                        "content":{
                            "application/json":{
                                "example":{
                                    "succeeded":true,
                                    "message":"Post details fetched successfully",
                                    "statusCode":200,
                                    "resultData":{
                                        "title": "Title of the post",
                                        "content":"HTML string content",
                                        "comments": {
                                            "comentId": "Id of the comment",
                                            "content":"Content of the comment",
                                            "userName": "Commentator's name"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["PostController"],
                "summary": "Update an existing post by ID",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The updated data for the blog post",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Post successfully updated"
                    },
                    "404": {
                        "description": "Post not found"
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    }
                }
            },
            "delete": {
                "tags": ["PostController"],
                "summary": "Delete a blog post by ID",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post successfully deleted"
                    },
                    "404": {
                        "description": "Post not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/register":{
            "post":{
                "tags": ["AuthController"],
                "summary":"Register a new user",
                "description":"Allows creating a new user with a name, email, password, and role.",
                "requestBody":{
                    "required":true,
                    "content":{
                        "application/json":{
                            "schema":{
                                "type":"object",
                                "properties":{
                                    "name":{
                                        "type":"string",
                                        "example":"John Doe"
                                    },
                                    "email":{
                                        "type":"string",
                                        "example":"johndoe@gmail.com"
                                    },
                                    "password":{
                                        "type":"string",
                                        "example":"StrongPassword"
                                    },
                                    "role":{
                                        "type":"string",
                                        "enum":[
                                            "Admin",
                                            "User"
                                        ],
                                        "example":"Admin"
                                    }
                                },
                                "required":[
                                    "name",
                                    "email",
                                    "password",
                                    "role"
                                ]
                            }
                        }
                    }
                },
                "responses":{
                    "200":{
                        "description":"User successfully registered",
                        "content":{
                            "application/json":{
                                "schema":{
                                    "type":"object",
                                    "properties":{
                                        "message":{
                                            "type":"string",
                                            "example":"User registered successfully"
                                        },
                                        "userId":{
                                            "type":"string",
                                            "example":"62e259a4c3c54b1234567890"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400":{
                        "description":"Invalid input",
                        "content":{
                            "application/json":{
                                "schema":{
                                    "type":"object",
                                    "properties":{
                                        "error":{
                                            "type":"string",
                                            "example":"Invalid email address"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/login":{
            "post":{
                "tags": ["AuthController"],
                "summary":"User login",
                "description":"Logs in the user and returns a JWT token",
                "operationId":"userLogin",
                "requestBody":{
                "required":true,
                "content":{
                    "application/json":{
                        "schema":{
                            "type":"object",
                            "properties":{
                            "email":{
                                "type":"string",
                                "example":"johndoe@gmail.com"
                            },
                            "password":{
                                "type":"string",
                                "example":"Password"
                            }
                            },
                            "required":[
                            "email",
                            "password"
                            ]
                        }
                    }
                }
                },
                "responses":{
                "200":{
                    "description":"Successful login",
                    "content":{
                        "application/json":{
                            "schema":{
                            "type":"object",
                            "properties":{
                                "token":{
                                    "type":"string",
                                    "example":"jwt token"
                                }
                            }
                            }
                        }
                    }
                },
                "400":{
                    "description":"Invalid email or password"
                },
                "500":{
                    "description":"Server error"
                }
                }
            }
        },
        "/request-password-reset":{
            "post":{
               "summary":"Request Password Reset",
               "description":"Sends a password reset token to the user's email.",
               "tags": ["AuthController"],
               "requestBody":{
                  "required":true,
                  "content":{
                     "application/json":{
                        "schema":{
                           "type":"object",
                           "properties":{
                              "email":{
                                 "type":"string",
                                 "format":"email",
                                 "example":"user@example.com"
                              }
                           },
                           "required":[
                              "email"
                           ]
                        }
                     }
                  }
               },
               "responses":{
                  "200":{
                     "description":"Password reset email sent successfully.",
                     "content":{
                        "application/json":{
                           "example":{
                              "succeeded":true,
                              "message":"Password reset email sent!",
                              "statusCode":200,
                              "resultData":true
                           }
                        }
                     }
                  },
                  "404":{
                     "description":"User not found.",
                     "content":{
                        "application/json":{
                           "example":{
                              "succeeded":false,
                              "message":"User not found",
                              "statusCode":404,
                              "resultData":null
                           }
                        }
                     }
                  },
                  "500":{
                     "description":"Internal server error.",
                     "content":{
                        "application/json":{
                           "example":{
                              "succeeded":false,
                              "message":"Error processing request",
                              "statusCode":500,
                              "resultData":"Internal server error message"
                           }
                        }
                     }
                  }
               }
            }
        },
        "/reset-password/{token}":{
            "post":{
               "summary":"Reset Password",
               "description":"Resets the user's password using the provided reset token.",
               "tags": ["AuthController"],
               "parameters":[
                    {
                        "name":"token",
                        "in":"path",
                        "required":true,
                        "description":"Password reset token.",
                        "schema":{
                            "type":"string",
                            "example":"example-reset-token-123456"
                        }
                    }
                ],
                "requestBody":{
                    "required":true,
                    "content":{
                        "application/json":{
                            "schema":{
                                "type":"object",
                                "properties":{
                                    "password":{
                                        "type":"string",
                                        "format":"password",
                                        "example":"NewSecurePassword123!"
                                    }
                                },
                                "required":[
                                    "password"
                                ]
                            }
                        }
                    }
                },
                "responses":{
                    "200":{
                        "description":"Password reset successful.",
                        "content":{
                            "application/json":{
                                "example":{
                                    "succeeded":true,
                                    "message":"Password reset successful.",
                                    "statusCode":200,
                                    "resultData":null
                                }
                            }
                        }
                    },
                    "400":{
                        "description":"Invalid or expired token.",
                        "content":{
                            "application/json":{
                                "example":{
                                    "succeeded":false,
                                    "message":"Invalid or expired token.",
                                    "statusCode":400,
                                    "resultData":null
                                }
                            }
                        }
                    },
                    "500":{
                        "description":"Internal server error.",
                        "content":{
                            "application/json":{
                                "example":{
                                    "succeeded":false,
                                    "message":"Error resetting password.",
                                    "statusCode":500,
                                    "resultData":"Internal server error message"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/comments/{id}": {
            "delete": {
              "summary": "Delete a comment",
              "description": "Deletes a comment by its ID.",
              "tags": ["CommentController"],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "ID of the comment to delete",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Comment deleted successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "succeeded": {
                            "type": "boolean",
                            "example": true
                          },
                          "message": {
                            "type": "string",
                            "example": "Comment deleted successfully"
                          },
                          "statusCode": {
                            "type": "integer",
                            "example": 200
                          }
                        }
                      }
                    }
                  }
                },
                "404": {
                  "description": "Comment not found",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Comment not found"
                          }
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal server error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Unable to delete comment"
                          },
                          "details": {
                            "type": "string",
                            "example": "Detailed error message"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
        },
        "/postComment": {
            "post": {
              "tags": ["CommentController"],
              "summary": "Create a new comment",
              "description": "Allows a user to post a comment on a specific post.",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "description": "The content of the comment",
                          "example": "Nice write-up. I am glad I read it!!"
                        },
                        "postId": {
                          "type": "string",
                          "description": "The ID of the post to comment on",
                          "example": "6759ca55c4534b18eeb62447"
                        }
                      },
                      "required": ["content", "postId"]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Comment created successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "succeeded": {
                            "type": "boolean",
                            "example": true
                          },
                          "message": {
                            "type": "string",
                            "example": "Action was successful"
                          },
                          "statusCode": {
                            "type": "integer",
                            "example": 200
                          },
                          "resultData": {
                            "type": "string",
                            "example": "Comment added"
                          }
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Bad request, missing or invalid parameters",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Invalid request body"
                          }
                        }
                      }
                    }
                  }
                },
                "500": {
                  "description": "Internal server error",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "Unable to create comment"
                          },
                          "details": {
                            "type": "string",
                            "example": "Detailed error message"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
        }
    },
    "components": {
        "schemas": {
            "Post": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "The title of the post"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the post"
                    },
                    "authorId": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The ID of the user who created the post"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of categories the post belongs to"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags associated with the post"
                    }
                },
                "required": ["title", "content", "authorId"]
            },
            "Comment": {
                "type": "object",
                "required": ["content", "postId", "userId"],
                "properties": {
                "content": {
                    "type": "string",
                    "example": "This is a comment"
                },
                "postId": {
                    "type": "string",
                    "format": "ObjectId",
                    "description": "ID of the related post",
                    "example": "60c72b2f5f1b2c6d88f5e123"
                },
                "userId": {
                    "type": "string",
                    "format": "ObjectId",
                    "description": "ID of the user who created the comment",
                    "example": "60c72b305f1b2c6d88f5e456"
                }
                }
            },
            "User": {
                "type": "object",
                "required": ["name", "email", "password"],
                "properties": {
                "name": {
                    "type": "string",
                    "description": "Full name of the user",
                    "example": "John Doe"
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's unique email address",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "type": "string",
                    "description": "Hashed user password",
                    "example": "hashed_password_here"
                },
                "role": {
                    "type": "string",
                    "enum": ["Admin", "Author", "Reader"],
                    "description": "Role assigned to the user",
                    "example": "Reader"
                },
                "resetToken": {
                    "type": "string",
                    "nullable": true,
                    "description": "Password reset token",
                    "example": "a4f63b8d5c1f4c0db02e3e01a4d5f3b8"
                },
                "resetTokenExpires": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "description": "Expiration time for the password reset token",
                    "example": "2024-12-17T23:59:59Z"
                }
                }
            }              
        },
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "security": [
        {
            "BearerAuth": []
        }
    ]
}
